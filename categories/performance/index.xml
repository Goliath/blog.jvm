<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Performance on Bitecode blog</title><link>https://bitecode.blog/categories/performance/</link><description>Recent content in Performance on Bitecode blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Thu, 02 Jun 2016 00:00:00 +0000</lastBuildDate><atom:link href="https://bitecode.blog/categories/performance/index.xml" rel="self" type="application/rss+xml"/><item><title>Dumping large MySQL database</title><link>https://bitecode.blog/2016/05/14/mysql-dump-large-database/</link><pubDate>Thu, 02 Jun 2016 00:00:00 +0000</pubDate><guid>https://bitecode.blog/2016/05/14/mysql-dump-large-database/</guid><description>&lt;h2 id="problem">Problem&lt;/h2>
&lt;p>Not going into details of credentials basic mysqldump command looks like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>mysqldump database &amp;gt; database_dump.sql
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Dump file size was ~3GB which might take quite long. Especially when the connection to mysql server was not fast enough.&lt;/p>
&lt;h2 id="solution">Solution&lt;/h2>
&lt;p>After a few attempts and noticing that it might take too long to fetch all data I found out that there is a nice switch in mysql and mysqldump commands.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>--compress, -C
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Switch will tell mysql server to compress the dump on the fly so you can save a lot of bandwidth. However both sides needs to support the setting. Note that you may also use that switch with mysql command.&lt;/p></description></item><item><title>Log Levels Performance</title><link>https://bitecode.blog/2016/05/14/log-levels-performance/</link><pubDate>Sat, 14 May 2016 00:00:00 +0000</pubDate><guid>https://bitecode.blog/2016/05/14/log-levels-performance/</guid><description>&lt;h2 id="problem">Problem&lt;/h2>
&lt;p>Take an example with grails log.debug() call. Let’s say I want to log a very often executed code.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-groovy" data-lang="groovy">&lt;span style="display:flex;">&lt;span>Long sum &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">(&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>&lt;span style="color:#ff79c6">..&lt;/span>&lt;span style="color:#bd93f9">1000&lt;/span>&lt;span style="color:#ff79c6">).&lt;/span>&lt;span style="color:#50fa7b">each&lt;/span> &lt;span style="color:#ff79c6">{&lt;/span> number &lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">++&lt;/span>sum
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">debug&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;Sum = ${sum}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I use log.debug so my information is logged only if my project configuration allows that. That way if we turn off DEBUG, the logged line should not affect application speed. But is that really true?&lt;/p>
&lt;p>Let’s check if the logged value is really not accessed?
To do so we need to turn off DEBUG and modify the code:&lt;/p></description></item></channel></rss>