[{"author":null,"categories":["Security"],"content":"They say - you are what you eat.","date":1712275200,"description":"They say - you are what you eat.","dir":"post/","excerpt_html":"They say - you are what you eat.","excerpt_text":"They say - you are what you eat.","expirydate":-62135596800,"fuzzywordcount":900,"html":"They say - you are what you eat.","keywords":null,"kind":"page","lang":"en","lastmod":1712275200,"objectID":"13713e4570011acaee901643a2aec1a6","permalink":"https://bitecodeblog.codeappeal.com/2024/04/05/jvm-serialization-exploits/","publishdate":"2024-04-05T00:00:00Z","readingtime":5,"relpermalink":"/2024/04/05/jvm-serialization-exploits/","section":"post","summary":"Intro The Java Virtual Machine (JVM) provides a mechanism for persisting Java objects, known as serialization. While introducing it was a great step forward, as developers stopped reinventing the wheel and write the same (still complex) bolierplate code. As we later learned it also opened a pandora box. I will try to describe the problem in below article.\nProblem This process of serialization involves converting the state of an object into a byte stream, which can then be reverted back into a copy of the object.","tags":["Groovy","JVM","Security"],"title":"Serialization exploits in JVM","type":"post","url":"/2024/04/05/jvm-serialization-exploits/","weight":0,"wordcount":866},{"author":null,"categories":["Groovy"],"content":"A funny null fact I found out after so many years of working with groovy.","date":1471564800,"description":"A funny null fact I found out after so many years of working with groovy.","dir":"post/","excerpt_html":"A funny null fact I found out after so many years of working with groovy.","excerpt_text":"A funny null fact I found out after so many years of working with groovy.","expirydate":-62135596800,"fuzzywordcount":200,"html":"A funny null fact I found out after so many years of working with groovy.","keywords":null,"kind":"page","lang":"en","lastmod":1471564800,"objectID":"719d1ac5540d47b79f7c009e23c0d006","permalink":"https://bitecodeblog.codeappeal.com/2016/08/19/groovy-compare-null/","publishdate":"2016-08-19T00:00:00Z","readingtime":1,"relpermalink":"/2016/08/19/groovy-compare-null/","section":"post","summary":"Problem I happen to create a construction like this:\nif(object?.value \u0026gt; 0) { println \u0026#34;do something\u0026#34; } else { println \u0026#34;do nothing\u0026#34; } Are you sure what will be printed when object is null? I must say I wasn’t.\nWe got used to negate null in groovy like this:\nassert !null == true but what about using null with relation operator?\nComparing null Let us review below code:\nassert null \u0026lt; 0 assert null \u0026lt; Integer.","tags":["Groovy","Tips"],"title":"Between null and positive infinity","type":"post","url":"/2016/08/19/groovy-compare-null/","weight":0,"wordcount":165},{"author":null,"categories":["Tips","Performance"],"content":null,"date":1464825600,"description":"","dir":"post/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":200,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1464825600,"objectID":"abd250966c97412a25f94f8000bd3002","permalink":"https://bitecodeblog.codeappeal.com/2016/05/14/mysql-dump-large-database/","publishdate":"2016-06-02T00:00:00Z","readingtime":1,"relpermalink":"/2016/05/14/mysql-dump-large-database/","section":"post","summary":"Problem Not going into details of credentials basic mysqldump command looks like this:\nmysqldump database \u0026gt; database_dump.sql Dump file size was ~3GB which might take quite long. Especially when the connection to mysql server was not fast enough.\nSolution After a few attempts and noticing that it might take too long to fetch all data I found out that there is a nice switch in mysql and mysqldump commands.\n--compress, -C Switch will tell mysql server to compress the dump on the fly so you can save a lot of bandwidth.","tags":["MySQL","Performance"],"title":"Dumping large MySQL database","type":"post","url":"/2016/05/14/mysql-dump-large-database/","weight":0,"wordcount":157},{"author":null,"categories":["Performance"],"content":null,"date":1463184e3,"description":"","dir":"post/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":300,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1463184e3,"objectID":"da92a79f864ff0ce0393245e5d206f39","permalink":"https://bitecodeblog.codeappeal.com/2016/05/14/log-levels-performance/","publishdate":"2016-05-14T00:00:00Z","readingtime":2,"relpermalink":"/2016/05/14/log-levels-performance/","section":"post","summary":"Problem Take an example with grails log.debug() call. Let’s say I want to log a very often executed code.\nLong sum = 0 (1..1000).each { number -\u0026gt; ++sum log.debug \u0026#34;Sum = ${sum}\u0026#34; } I use log.debug so my information is logged only if my project configuration allows that. That way if we turn off DEBUG, the logged line should not affect application speed. But is that really true?\nLet’s check if the logged value is really not accessed?","tags":null,"title":"Log Levels Performance","type":"post","url":"/2016/05/14/log-levels-performance/","weight":0,"wordcount":217},{"author":null,"categories":null,"content":null,"date":1462060800,"description":"","dir":"post/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1462060800,"objectID":"033d3e214005f23e4746999f029d437b","permalink":"https://bitecodeblog.codeappeal.com/2016/05/01/hello-world/","publishdate":"2016-05-01T00:00:00Z","readingtime":1,"relpermalink":"/2016/05/01/hello-world/","section":"post","summary":" “Yeah It\u0026rsquo;s on. ”\nHello World! ","tags":null,"title":"Welcome to Bitecode Blog","type":"post","url":"/2016/05/01/hello-world/","weight":0,"wordcount":6},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"about/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":400,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"8576ec274c98b3831668a172fa632d80","permalink":"https://bitecodeblog.codeappeal.com/about/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/about/","section":"","summary":"About Me Marcin Szlagor is a software engineer specializing in JVM languages and frameworks with professional experince since 2003. He has been working on many operating systems, using many different programming languages and numerous frameworks.\nHobbist His programming adventure started in his youth (1996). His first language was Clipper, later he moved to Windows programming starting with Delphi 2. Next languages were C, C++ with some pinch of Assembly. For quite a long time he felt the need to be close to operating system creating small/lightweight applications (WinAPI) and device drivers on Windows.","tags":null,"title":"","type":"page","url":"/about/","weight":0,"wordcount":383},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"search/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"8946788897930c0c0c39fbfcd30ff2e4","permalink":"https://bitecodeblog.codeappeal.com/search/placeholder/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/search/placeholder/","section":"search","summary":"","tags":null,"title":"","type":"search","url":"/search/placeholder/","weight":0,"wordcount":0}]