[{"author":null,"categories":["JVM"],"content":"How to survive stackoverflow.","date":1715299200,"description":"How to survive stackoverflow.","dir":"post/","excerpt_html":"How to survive stackoverflow.","excerpt_text":"How to survive stackoverflow.","expirydate":-62135596800,"fuzzywordcount":600,"html":"How to survive stackoverflow.","keywords":null,"kind":"page","lang":"en","lastmod":1715299200,"objectID":"8bb80bc3a4cd3982bdf02bcd858203ae","permalink":"https://bitecode.blog/2024/05/10/tweaking-stack-for-fun-and-profit/","publishdate":"2024-05-10T00:00:00Z","readingtime":3,"relpermalink":"/2024/05/10/tweaking-stack-for-fun-and-profit/","section":"post","summary":"\u003ch2 id=\"stackoverflow\"\u003eStackoverflow\u003c/h2\u003e\n\u003cp\u003ewe\u0026rsquo;ve all been there\u0026hellip; :)\u003c/p\u003e\n\u003cp\u003eJVM will throw StackoverflowException when it detects that the thread stack memory space is full. This is similar situation we encounter when we run out of heap memory and get OutOfMemoryException.\nMost of the time, we\u0026rsquo;re experiencing stackoverflow exception when thread in the JVM application has too long call chain. That can result in eating up all stack memory by stack frames.\nJVM has safe defaults for stack memory region and usually it\u0026rsquo;s around 1MB.\nIf you encounter StackoverflowException, most likely you\u0026rsquo;re using recursion in your application - either planned or not :)\u003c/p\u003e","tags":["JAVA","JVM"],"title":"Tweaking the stack for fun and profit","type":"post","url":"/2024/05/10/tweaking-stack-for-fun-and-profit/","weight":0,"wordcount":542},{"author":null,"categories":["JVM"],"content":"Sometimes the best place to troubleshot an issue is the remote instance.","date":1713830400,"description":"Sometimes the best place to troubleshot an issue is the remote instance.","dir":"post/","excerpt_html":"Sometimes the best place to troubleshot an issue is the remote instance.","excerpt_text":"Sometimes the best place to troubleshot an issue is the remote instance.","expirydate":-62135596800,"fuzzywordcount":600,"html":"Sometimes the best place to troubleshot an issue is the remote instance.","keywords":null,"kind":"page","lang":"en","lastmod":1713830400,"objectID":"a21c0688e24c526397f42a91591ae5a4","permalink":"https://bitecode.blog/2024/04/23/remote-debugging-on-kubernates/","publishdate":"2024-04-23T00:00:00Z","readingtime":3,"relpermalink":"/2024/04/23/remote-debugging-on-kubernates/","section":"post","summary":"\u003ch2 id=\"scenario\"\u003eScenario\u003c/h2\u003e\n\u003cp\u003eDebugging applications in a local environment is straightforward, but what happens when your application is running in a Kubernetes cluster?\nSometimes the best place to debug an issue is the remote instance itself.\nThis article will guide you through the process of remotely debugging your Java applications running in Kubernetes.\u003c/p\u003e\n\u003ch2 id=\"prerequisites\"\u003ePrerequisites\u003c/h2\u003e\n\u003cp\u003eIn this very short post I assume you have:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ea Java application running in a Kubernetes cluster\u003c/li\u003e\n\u003cli\u003eIntelliJ IDEA\u003c/li\u003e\n\u003cli\u003ekubectl command-line tool installed and configured\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"step-1-start-your-java-application-in-debug-mode\"\u003eStep 1: Start Your Java Application in Debug Mode\u003c/h2\u003e\n\u003cp\u003eFirst, you need to ensure your Java application is running in debug mode. This is not happening by default.\u003c/p\u003e","tags":["JVM","Debugging","kubernetes","DevOps"],"title":"Remote JVM debugging","type":"post","url":"/2024/04/23/remote-debugging-on-kubernates/","weight":0,"wordcount":501},{"author":null,"categories":["JVM"],"content":"Defaults are not always safe.","date":1713571200,"description":"Defaults are not always safe.","dir":"post/","excerpt_html":"Defaults are not always safe.","excerpt_text":"Defaults are not always safe.","expirydate":-62135596800,"fuzzywordcount":1300,"html":"Defaults are not always safe.","keywords":null,"kind":"page","lang":"en","lastmod":1713571200,"objectID":"b2491c589e61c051bfd188f82b1676a5","permalink":"https://bitecode.blog/2024/04/20/java-ergonomics-basics/","publishdate":"2024-04-20T00:00:00Z","readingtime":6,"relpermalink":"/2024/04/20/java-ergonomics-basics/","section":"post","summary":"\u003ch2 id=\"intro\"\u003eIntro\u003c/h2\u003e\n\u003cp\u003eIt\u0026rsquo;s not a secret that JVM is an extremly complex execution environment. It has many options that can be set to tune the application execution.\nWhat happens if we don\u0026rsquo;t set any of them or we pick only few?\nIn this article I will explain what is Java ergonomics and how it works to supply default JVM options.\nI will also tell why it\u0026rsquo;s never safe to rely on the defaults.\u003c/p\u003e","tags":["JAVA","JVM","Java Ergonomics"],"title":"Introduction to Java ergonomics","type":"post","url":"/2024/04/20/java-ergonomics-basics/","weight":0,"wordcount":1271},{"author":null,"categories":["Security"],"content":"They say - you are what you eat.","date":1712275200,"description":"They say - you are what you eat.","dir":"post/","excerpt_html":"They say - you are what you eat.","excerpt_text":"They say - you are what you eat.","expirydate":-62135596800,"fuzzywordcount":1e3,"html":"They say - you are what you eat.","keywords":null,"kind":"page","lang":"en","lastmod":1712275200,"objectID":"13713e4570011acaee901643a2aec1a6","permalink":"https://bitecode.blog/2024/04/05/jvm-serialization-exploits/","publishdate":"2024-04-05T00:00:00Z","readingtime":5,"relpermalink":"/2024/04/05/jvm-serialization-exploits/","section":"post","summary":"\u003ch2 id=\"intro\"\u003eIntro\u003c/h2\u003e\n\u003cp\u003eThe Java Virtual Machine (JVM) provides a mechanism for persisting Java objects, known as serialization.\nWhen introducing, it was a great step forward, as developers stopped reinventing the wheel and writing the same (still complex) boilerplate code.\nAs we later learned it also opened a pandora box. I will try to describe the problem in the article below.\u003c/p\u003e\n\u003ch2 id=\"problem\"\u003eProblem\u003c/h2\u003e\n\u003cp\u003eThis process of serialization involves converting the state of an object into a byte stream, which can then be reverted back into a copy of the object.\nThat way we can persist any object, store it, then load whenever we want.\u003c/p\u003e","tags":["Groovy","JVM","Security"],"title":"Serialization exploits in JVM","type":"post","url":"/2024/04/05/jvm-serialization-exploits/","weight":0,"wordcount":901},{"author":null,"categories":["Groovy"],"content":"A funny null fact I found out after so many years of working with groovy.","date":1471564800,"description":"A funny null fact I found out after so many years of working with groovy.","dir":"post/","excerpt_html":"A funny null fact I found out after so many years of working with groovy.","excerpt_text":"A funny null fact I found out after so many years of working with groovy.","expirydate":-62135596800,"fuzzywordcount":200,"html":"A funny null fact I found out after so many years of working with groovy.","keywords":null,"kind":"page","lang":"en","lastmod":1471564800,"objectID":"719d1ac5540d47b79f7c009e23c0d006","permalink":"https://bitecode.blog/2016/08/19/groovy-compare-null/","publishdate":"2016-08-19T00:00:00Z","readingtime":1,"relpermalink":"/2016/08/19/groovy-compare-null/","section":"post","summary":"\u003ch2 id=\"problem\"\u003eProblem\u003c/h2\u003e\n\u003cp\u003eI happen to create a construction like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-groovy\" data-lang=\"groovy\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff79c6\"\u003eif\u003c/span\u003e\u003cspan style=\"color:#ff79c6\"\u003e(\u003c/span\u003eobject\u003cspan style=\"color:#ff79c6\"\u003e?.\u003c/span\u003e\u003cspan style=\"color:#50fa7b\"\u003evalue\u003c/span\u003e \u003cspan style=\"color:#ff79c6\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#bd93f9\"\u003e0\u003c/span\u003e\u003cspan style=\"color:#ff79c6\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#ff79c6\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    println \u003cspan style=\"color:#f1fa8c\"\u003e\u0026#34;do something\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff79c6\"\u003e}\u003c/span\u003e \u003cspan style=\"color:#ff79c6\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#ff79c6\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    println \u003cspan style=\"color:#f1fa8c\"\u003e\u0026#34;do nothing\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff79c6\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAre you sure what will be printed when object is null?\nI must say I wasn’t.\u003c/p\u003e\n\u003cp\u003eWe got used to negate null in groovy like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-groovy\" data-lang=\"groovy\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff79c6\"\u003eassert\u003c/span\u003e \u003cspan style=\"color:#ff79c6\"\u003e!\u003c/span\u003e\u003cspan style=\"color:#ff79c6\"\u003enull\u003c/span\u003e \u003cspan style=\"color:#ff79c6\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#ff79c6\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003ebut what about using null with relation operator?\u003c/p\u003e\n\u003ch2 id=\"comparing-null\"\u003eComparing null\u003c/h2\u003e\n\u003cp\u003eLet us review below code:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-groovy\" data-lang=\"groovy\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff79c6\"\u003eassert\u003c/span\u003e \u003cspan style=\"color:#ff79c6\"\u003enull\u003c/span\u003e \u003cspan style=\"color:#ff79c6\"\u003e\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#bd93f9\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff79c6\"\u003eassert\u003c/span\u003e \u003cspan style=\"color:#ff79c6\"\u003enull\u003c/span\u003e \u003cspan style=\"color:#ff79c6\"\u003e\u0026lt;\u003c/span\u003e Integer\u003cspan style=\"color:#ff79c6\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#50fa7b\"\u003eMIN_VALUE\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff79c6\"\u003eassert\u003c/span\u003e \u003cspan style=\"color:#ff79c6\"\u003enull\u003c/span\u003e \u003cspan style=\"color:#ff79c6\"\u003e\u0026lt;\u003c/span\u003e Double\u003cspan style=\"color:#ff79c6\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#50fa7b\"\u003eNEGATIVE_INFINITY\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff79c6\"\u003eassert\u003c/span\u003e \u003cspan style=\"color:#ff79c6\"\u003enull\u003c/span\u003e \u003cspan style=\"color:#ff79c6\"\u003e\u0026lt;\u003c/span\u003e Integer\u003cspan style=\"color:#ff79c6\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#50fa7b\"\u003eMAX_VALUE\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff79c6\"\u003eassert\u003c/span\u003e \u003cspan style=\"color:#ff79c6\"\u003enull\u003c/span\u003e \u003cspan style=\"color:#ff79c6\"\u003e\u0026lt;\u003c/span\u003e Double\u003cspan style=\"color:#ff79c6\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#50fa7b\"\u003ePOSITIVE_INFINITY\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIn each of these cases, the assertion passes without errors. This behavior might seem counterintuitive at first glance.\u003c/p\u003e","tags":["Groovy","Tips"],"title":"Between null and positive infinity","type":"post","url":"/2016/08/19/groovy-compare-null/","weight":0,"wordcount":165},{"author":null,"categories":["Tips","Performance"],"content":null,"date":1464825600,"description":"","dir":"post/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":200,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1464825600,"objectID":"abd250966c97412a25f94f8000bd3002","permalink":"https://bitecode.blog/2016/05/14/mysql-dump-large-database/","publishdate":"2016-06-02T00:00:00Z","readingtime":1,"relpermalink":"/2016/05/14/mysql-dump-large-database/","section":"post","summary":"\u003ch2 id=\"problem\"\u003eProblem\u003c/h2\u003e\n\u003cp\u003eNot going into details of credentials basic mysqldump command looks like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emysqldump database \u0026gt; database_dump.sql\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eDump file size was ~3GB which might take quite long. Especially when the connection to mysql server was not fast enough.\u003c/p\u003e\n\u003ch2 id=\"solution\"\u003eSolution\u003c/h2\u003e\n\u003cp\u003eAfter a few attempts and noticing that it might take too long to fetch all data I found out that there is a nice switch in mysql and mysqldump commands.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e--compress, -C\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eSwitch will tell mysql server to compress the dump on the fly so you can save a lot of bandwidth. However both sides needs to support the setting. Note that you may also use that switch with mysql command.\u003c/p\u003e","tags":["MySQL","Performance"],"title":"Dumping large MySQL database","type":"post","url":"/2016/05/14/mysql-dump-large-database/","weight":0,"wordcount":157},{"author":null,"categories":["Performance"],"content":null,"date":1463184e3,"description":"","dir":"post/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":300,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1463184e3,"objectID":"da92a79f864ff0ce0393245e5d206f39","permalink":"https://bitecode.blog/2016/05/14/log-levels-performance/","publishdate":"2016-05-14T00:00:00Z","readingtime":2,"relpermalink":"/2016/05/14/log-levels-performance/","section":"post","summary":"\u003ch2 id=\"problem\"\u003eProblem\u003c/h2\u003e\n\u003cp\u003eTake an example with grails log.debug() call. Let’s say I want to log a very often executed code.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-groovy\" data-lang=\"groovy\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eLong sum \u003cspan style=\"color:#ff79c6\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#bd93f9\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff79c6\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#bd93f9\"\u003e1\u003c/span\u003e\u003cspan style=\"color:#ff79c6\"\u003e..\u003c/span\u003e\u003cspan style=\"color:#bd93f9\"\u003e1000\u003c/span\u003e\u003cspan style=\"color:#ff79c6\"\u003e).\u003c/span\u003e\u003cspan style=\"color:#50fa7b\"\u003eeach\u003c/span\u003e \u003cspan style=\"color:#ff79c6\"\u003e{\u003c/span\u003e number \u003cspan style=\"color:#ff79c6\"\u003e-\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ff79c6\"\u003e++\u003c/span\u003esum\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    log\u003cspan style=\"color:#ff79c6\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#50fa7b\"\u003edebug\u003c/span\u003e \u003cspan style=\"color:#f1fa8c\"\u003e\u0026#34;Sum = ${sum}\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff79c6\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eI use log.debug so my information is logged only if my project configuration allows that. That way if we turn off DEBUG, the logged line should not affect application speed. But is that really true?\u003c/p\u003e\n\u003cp\u003eLet’s check if the logged value is really not accessed?\nTo do so we need to turn off DEBUG and modify the code:\u003c/p\u003e","tags":null,"title":"Log Levels Performance","type":"post","url":"/2016/05/14/log-levels-performance/","weight":0,"wordcount":217},{"author":null,"categories":null,"content":null,"date":1462060800,"description":"","dir":"post/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1462060800,"objectID":"033d3e214005f23e4746999f029d437b","permalink":"https://bitecode.blog/2016/05/01/hello-world/","publishdate":"2016-05-01T00:00:00Z","readingtime":1,"relpermalink":"/2016/05/01/hello-world/","section":"post","summary":"\u003cblockquote\u003e\n\u003cp\u003e“Yeah It\u0026rsquo;s on. ”\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"hello-world\"\u003eHello World!\u003c/h2\u003e","tags":null,"title":"Welcome to Bitecode Blog","type":"post","url":"/2016/05/01/hello-world/","weight":0,"wordcount":6},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"about/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":400,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"8576ec274c98b3831668a172fa632d80","permalink":"https://bitecode.blog/about/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/about/","section":"","summary":"\u003ch2 id=\"about-me\"\u003eAbout Me\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eMarcin Szlagor\u003c/em\u003e\u003c/strong\u003e is a software engineer specializing in JVM languages and frameworks with professional experince since 2003. He has been working on many operating systems, using many different programming languages and numerous frameworks.\u003c/p\u003e\n\u003ch3 id=\"hobbist\"\u003eHobbist\u003c/h3\u003e\n\u003cp\u003eHis programming adventure started in his youth (1996). His first language was \u003ca href=\"https://en.wikipedia.org/wiki/Clipper_(programming_language)\"\u003eClipper\u003c/a\u003e, later he moved to Windows programming starting with Delphi 2. Next languages were C, C++ with some pinch of Assembly. For quite a long time he felt the need to be close to operating system creating small/lightweight applications (WinAPI) and device drivers on Windows.\u003c/p\u003e","tags":null,"title":"","type":"page","url":"/about/","weight":0,"wordcount":383},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"notes/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"1ede8046f9c3a02d422dea7bbf324e64","permalink":"https://bitecode.blog/notes/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/notes/","section":"","summary":"","tags":null,"title":"","type":"page","url":"/notes/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"search/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"8946788897930c0c0c39fbfcd30ff2e4","permalink":"https://bitecode.blog/search/placeholder/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/search/placeholder/","section":"search","summary":"","tags":null,"title":"","type":"search","url":"/search/placeholder/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":"Archive of historical posts.","date":-62135596800,"description":"Archive of historical posts.","dir":"archive/","excerpt_html":"Archive of historical posts.","excerpt_text":"Archive of historical posts.","expirydate":-62135596800,"fuzzywordcount":100,"html":"Archive of historical posts.","keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"a06e5ce9eca4c3260843078104889780","permalink":"https://bitecode.blog/archive/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/archive/","section":"","summary":"","tags":null,"title":"Posts Archive","type":"archive","url":"/archive/","weight":0,"wordcount":0}]