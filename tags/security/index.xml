<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Security on Bitecode blog</title><link>https://bitecode.blog/tags/security/</link><description>Recent content in Security on Bitecode blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Fri, 05 Apr 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://bitecode.blog/tags/security/index.xml" rel="self" type="application/rss+xml"/><item><title>Serialization exploits in JVM</title><link>https://bitecode.blog/2024/04/05/jvm-serialization-exploits/</link><pubDate>Fri, 05 Apr 2024 00:00:00 +0000</pubDate><guid>https://bitecode.blog/2024/04/05/jvm-serialization-exploits/</guid><description>&lt;h2 id="intro">Intro&lt;/h2>
&lt;p>The Java Virtual Machine (JVM) provides a mechanism for persisting Java objects, known as serialization.
When introducing, it was a great step forward, as developers stopped reinventing the wheel and writing the same (still complex) boilerplate code.
As we later learned it also opened a pandora box. I will try to describe the problem in the article below.&lt;/p>
&lt;h2 id="problem">Problem&lt;/h2>
&lt;p>This process of serialization involves converting the state of an object into a byte stream, which can then be reverted back into a copy of the object.
That way we can persist any object, store it, then load whenever we want.&lt;/p></description></item></channel></rss>