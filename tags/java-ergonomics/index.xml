<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Java Ergonomics on Bitecode blog</title><link>https://bitecode.blog/tags/java-ergonomics/</link><description>Recent content in Java Ergonomics on Bitecode blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sat, 20 Apr 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://bitecode.blog/tags/java-ergonomics/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction to Java ergonomics</title><link>https://bitecode.blog/2024/04/20/java-ergonomics-basics/</link><pubDate>Sat, 20 Apr 2024 00:00:00 +0000</pubDate><guid>https://bitecode.blog/2024/04/20/java-ergonomics-basics/</guid><description>Intro It&amp;rsquo;s not a secret that JVM is an extremly complex execution environment. It has many options that can be set to tune the application execution. What happens if we don&amp;rsquo;t set any of them or we pick only few? In this article I will explain what is Java ergonomics and how it works to supply default JVM options. I will also tell why it&amp;rsquo;s never safe to rely on the defaults.</description></item></channel></rss>