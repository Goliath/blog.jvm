<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>JVM on Bitecode blog</title><link>https://bitecode.blog/tags/jvm/</link><description>Recent content in JVM on Bitecode blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sat, 20 Apr 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://bitecode.blog/tags/jvm/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction to Java ergonomics</title><link>https://bitecode.blog/2024/04/20/java-ergonomics-basics/</link><pubDate>Sat, 20 Apr 2024 00:00:00 +0000</pubDate><guid>https://bitecode.blog/2024/04/20/java-ergonomics-basics/</guid><description>Intro It&amp;rsquo;s not a secret that JVM is an extremly complex execution environment. It has many options that can be set to tune the application execution. What happens if we don&amp;rsquo;t set any of them or we pick only few? In this article I will explain what is Java ergonomics and how it works to supply default JVM options. I will also tell why it&amp;rsquo;s never safe to rely on the defaults.</description></item><item><title>Serialization exploits in JVM</title><link>https://bitecode.blog/2024/04/05/jvm-serialization-exploits/</link><pubDate>Fri, 05 Apr 2024 00:00:00 +0000</pubDate><guid>https://bitecode.blog/2024/04/05/jvm-serialization-exploits/</guid><description>Intro The Java Virtual Machine (JVM) provides a mechanism for persisting Java objects, known as serialization. When introducing, it was a great step forward, as developers stopped reinventing the wheel and writing the same (still complex) boilerplate code. As we later learned it also opened a pandora box. I will try to describe the problem in the article below.
Problem This process of serialization involves converting the state of an object into a byte stream, which can then be reverted back into a copy of the object.</description></item></channel></rss>