<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Bitecode blog</title><link>https://bitecode.blog/</link><description>Recent content on Bitecode blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Fri, 05 Apr 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://bitecode.blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Serialization exploits in JVM</title><link>https://bitecode.blog/2024/04/05/jvm-serialization-exploits/</link><pubDate>Fri, 05 Apr 2024 00:00:00 +0000</pubDate><guid>https://bitecode.blog/2024/04/05/jvm-serialization-exploits/</guid><description>Intro The Java Virtual Machine (JVM) provides a mechanism for persisting Java objects, known as serialization. While introducing it was a great step forward, as developers stopped reinventing the wheel and write the same (still complex) bolierplate code. As we later learned it also opened a pandora box. I will try to describe the problem in below article.
Problem This process of serialization involves converting the state of an object into a byte stream, which can then be reverted back into a copy of the object.</description></item><item><title>Between null and positive infinity</title><link>https://bitecode.blog/2016/08/19/groovy-compare-null/</link><pubDate>Fri, 19 Aug 2016 00:00:00 +0000</pubDate><guid>https://bitecode.blog/2016/08/19/groovy-compare-null/</guid><description>Problem I happen to create a construction like this:
if(object?.value &amp;gt; 0) { println &amp;#34;do something&amp;#34; } else { println &amp;#34;do nothing&amp;#34; } Are you sure what will be printed when object is null? I must say I wasn’t.
We got used to negate null in groovy like this:
assert !null == true but what about using null with relation operator?
Comparing null Let us review below code:
assert null &amp;lt; 0 assert null &amp;lt; Integer.</description></item><item><title>Dumping large MySQL database</title><link>https://bitecode.blog/2016/05/14/mysql-dump-large-database/</link><pubDate>Thu, 02 Jun 2016 00:00:00 +0000</pubDate><guid>https://bitecode.blog/2016/05/14/mysql-dump-large-database/</guid><description>Problem Not going into details of credentials basic mysqldump command looks like this:
mysqldump database &amp;gt; database_dump.sql Dump file size was ~3GB which might take quite long. Especially when the connection to mysql server was not fast enough.
Solution After a few attempts and noticing that it might take too long to fetch all data I found out that there is a nice switch in mysql and mysqldump commands.
--compress, -C Switch will tell mysql server to compress the dump on the fly so you can save a lot of bandwidth.</description></item><item><title>Log Levels Performance</title><link>https://bitecode.blog/2016/05/14/log-levels-performance/</link><pubDate>Sat, 14 May 2016 00:00:00 +0000</pubDate><guid>https://bitecode.blog/2016/05/14/log-levels-performance/</guid><description>Problem Take an example with grails log.debug() call. Let’s say I want to log a very often executed code.
Long sum = 0 (1..1000).each { number -&amp;gt; ++sum log.debug &amp;#34;Sum = ${sum}&amp;#34; } I use log.debug so my information is logged only if my project configuration allows that. That way if we turn off DEBUG, the logged line should not affect application speed. But is that really true?
Let’s check if the logged value is really not accessed?</description></item><item><title>Welcome to Bitecode Blog</title><link>https://bitecode.blog/2016/05/01/hello-world/</link><pubDate>Sun, 01 May 2016 00:00:00 +0000</pubDate><guid>https://bitecode.blog/2016/05/01/hello-world/</guid><description> “Yeah It&amp;rsquo;s on. ”
Hello World!</description></item><item><title/><link>https://bitecode.blog/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bitecode.blog/about/</guid><description>About Me Marcin Szlagor is a software engineer specializing in JVM languages and frameworks with professional experince since 2003. He has been working on many operating systems, using many different programming languages and numerous frameworks.
Hobbist His programming adventure started in his youth (1996). His first language was Clipper, later he moved to Windows programming starting with Delphi 2. Next languages were C, C++ with some pinch of Assembly. For quite a long time he felt the need to be close to operating system creating small/lightweight applications (WinAPI) and device drivers on Windows.</description></item><item><title/><link>https://bitecode.blog/search/placeholder/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bitecode.blog/search/placeholder/</guid><description/></item></channel></rss>