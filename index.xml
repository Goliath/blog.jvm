<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Bitecode blog</title><link>https://bitecode.blog/</link><description>Recent content on Bitecode blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Wed, 09 Oct 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://bitecode.blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Git spoofing</title><link>https://bitecode.blog/2024/10/09/git-spoofing/</link><pubDate>Wed, 09 Oct 2024 00:00:00 +0000</pubDate><guid>https://bitecode.blog/2024/10/09/git-spoofing/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>when checking git log or GitHub commits history we can see that each commit has a corresponding author.
We learned to trust that information.&lt;/p>
&lt;p>What if I told you that this information can be easily spoofed?&lt;/p>
&lt;h2 id="what-is-git-log">What is git log&lt;/h2>
&lt;p>Every time we commit changes to the git repository, git stores information about the author of the commit.&lt;/p>
&lt;p>This information is stored per commit object and can be displayed by executing &lt;code>git log&lt;/code> command.&lt;/p></description></item><item><title>Tweaking the stack for fun and profit</title><link>https://bitecode.blog/2024/05/10/tweaking-stack-for-fun-and-profit/</link><pubDate>Fri, 10 May 2024 00:00:00 +0000</pubDate><guid>https://bitecode.blog/2024/05/10/tweaking-stack-for-fun-and-profit/</guid><description>&lt;h2 id="stackoverflow">Stackoverflow&lt;/h2>
&lt;p>we&amp;rsquo;ve all been there&amp;hellip; :)&lt;/p>
&lt;p>JVM will throw StackoverflowException when it detects that the thread stack memory space is full. This is similar situation we encounter when we run out of heap memory and get OutOfMemoryException.
Most of the time, we&amp;rsquo;re experiencing stackoverflow exception when thread in the JVM application has too long call chain. That can result in eating up all stack memory by stack frames.
JVM has safe defaults for stack memory region and usually it&amp;rsquo;s around 1MB.
If you encounter StackoverflowException, most likely you&amp;rsquo;re using recursion in your application - either planned or not :)&lt;/p></description></item><item><title>Remote JVM debugging</title><link>https://bitecode.blog/2024/04/23/remote-debugging-on-kubernates/</link><pubDate>Tue, 23 Apr 2024 00:00:00 +0000</pubDate><guid>https://bitecode.blog/2024/04/23/remote-debugging-on-kubernates/</guid><description>&lt;h2 id="scenario">Scenario&lt;/h2>
&lt;p>Debugging applications in a local environment is straightforward, but what happens when your application is running in a Kubernetes cluster?
Sometimes the best place to debug an issue is the remote instance itself.
This article will guide you through the process of remotely debugging your Java applications running in Kubernetes.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;/h2>
&lt;p>In this very short post I assume you have:&lt;/p>
&lt;ul>
&lt;li>a Java application running in a Kubernetes cluster&lt;/li>
&lt;li>IntelliJ IDEA&lt;/li>
&lt;li>kubectl command-line tool installed and configured&lt;/li>
&lt;/ul>
&lt;h2 id="step-1-start-your-java-application-in-debug-mode">Step 1: Start Your Java Application in Debug Mode&lt;/h2>
&lt;p>First, you need to ensure your Java application is running in debug mode. This is not happening by default.&lt;/p></description></item><item><title>Introduction to Java ergonomics</title><link>https://bitecode.blog/2024/04/20/java-ergonomics-basics/</link><pubDate>Sat, 20 Apr 2024 00:00:00 +0000</pubDate><guid>https://bitecode.blog/2024/04/20/java-ergonomics-basics/</guid><description>&lt;h2 id="intro">Intro&lt;/h2>
&lt;p>It&amp;rsquo;s not a secret that JVM is an extremly complex execution environment. It has many options that can be set to tune the application execution.
What happens if we don&amp;rsquo;t set any of them or we pick only few?
In this article I will explain what is Java ergonomics and how it works to supply default JVM options.
I will also tell why it&amp;rsquo;s never safe to rely on the defaults.&lt;/p></description></item><item><title>Serialization exploits in JVM</title><link>https://bitecode.blog/2024/04/05/jvm-serialization-exploits/</link><pubDate>Fri, 05 Apr 2024 00:00:00 +0000</pubDate><guid>https://bitecode.blog/2024/04/05/jvm-serialization-exploits/</guid><description>&lt;h2 id="intro">Intro&lt;/h2>
&lt;p>The Java Virtual Machine (JVM) provides a mechanism for persisting Java objects, known as serialization.
When introducing, it was a great step forward, as developers stopped reinventing the wheel and writing the same (still complex) boilerplate code.
As we later learned it also opened a pandora box. I will try to describe the problem in the article below.&lt;/p>
&lt;h2 id="problem">Problem&lt;/h2>
&lt;p>This process of serialization involves converting the state of an object into a byte stream, which can then be reverted back into a copy of the object.
That way we can persist any object, store it, then load whenever we want.&lt;/p></description></item><item><title>Between null and positive infinity</title><link>https://bitecode.blog/2016/08/19/groovy-compare-null/</link><pubDate>Fri, 19 Aug 2016 00:00:00 +0000</pubDate><guid>https://bitecode.blog/2016/08/19/groovy-compare-null/</guid><description>&lt;h2 id="problem">Problem&lt;/h2>
&lt;p>I happen to create a construction like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-groovy" data-lang="groovy">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">if&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>object&lt;span style="color:#ff79c6">?.&lt;/span>&lt;span style="color:#50fa7b">value&lt;/span> &lt;span style="color:#ff79c6">&amp;gt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>&lt;span style="color:#ff79c6">)&lt;/span> &lt;span style="color:#ff79c6">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println &lt;span style="color:#f1fa8c">&amp;#34;do something&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">}&lt;/span> &lt;span style="color:#ff79c6">else&lt;/span> &lt;span style="color:#ff79c6">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println &lt;span style="color:#f1fa8c">&amp;#34;do nothing&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Are you sure what will be printed when object is null?
I must say I wasn’t.&lt;/p>
&lt;p>We got used to negate null in groovy like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-groovy" data-lang="groovy">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">assert&lt;/span> &lt;span style="color:#ff79c6">!&lt;/span>&lt;span style="color:#ff79c6">null&lt;/span> &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#ff79c6">true&lt;/span> 
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>but what about using null with relation operator?&lt;/p>
&lt;h2 id="comparing-null">Comparing null&lt;/h2>
&lt;p>Let us review below code:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-groovy" data-lang="groovy">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">assert&lt;/span> &lt;span style="color:#ff79c6">null&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">assert&lt;/span> &lt;span style="color:#ff79c6">null&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> Integer&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">MIN_VALUE&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">assert&lt;/span> &lt;span style="color:#ff79c6">null&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> Double&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">NEGATIVE_INFINITY&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">assert&lt;/span> &lt;span style="color:#ff79c6">null&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> Integer&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">MAX_VALUE&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">assert&lt;/span> &lt;span style="color:#ff79c6">null&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> Double&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">POSITIVE_INFINITY&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In each of these cases, the assertion passes without errors. This behavior might seem counterintuitive at first glance.&lt;/p></description></item><item><title>Dumping large MySQL database</title><link>https://bitecode.blog/2016/05/14/mysql-dump-large-database/</link><pubDate>Thu, 02 Jun 2016 00:00:00 +0000</pubDate><guid>https://bitecode.blog/2016/05/14/mysql-dump-large-database/</guid><description>&lt;h2 id="problem">Problem&lt;/h2>
&lt;p>Not going into details of credentials basic mysqldump command looks like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>mysqldump database &amp;gt; database_dump.sql
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Dump file size was ~3GB which might take quite long. Especially when the connection to mysql server was not fast enough.&lt;/p>
&lt;h2 id="solution">Solution&lt;/h2>
&lt;p>After a few attempts and noticing that it might take too long to fetch all data I found out that there is a nice switch in mysql and mysqldump commands.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>--compress, -C
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Switch will tell mysql server to compress the dump on the fly so you can save a lot of bandwidth. However both sides needs to support the setting. Note that you may also use that switch with mysql command.&lt;/p></description></item><item><title>Log Levels Performance</title><link>https://bitecode.blog/2016/05/14/log-levels-performance/</link><pubDate>Sat, 14 May 2016 00:00:00 +0000</pubDate><guid>https://bitecode.blog/2016/05/14/log-levels-performance/</guid><description>&lt;h2 id="problem">Problem&lt;/h2>
&lt;p>Take an example with grails log.debug() call. Let’s say I want to log a very often executed code.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-groovy" data-lang="groovy">&lt;span style="display:flex;">&lt;span>Long sum &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">(&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>&lt;span style="color:#ff79c6">..&lt;/span>&lt;span style="color:#bd93f9">1000&lt;/span>&lt;span style="color:#ff79c6">).&lt;/span>&lt;span style="color:#50fa7b">each&lt;/span> &lt;span style="color:#ff79c6">{&lt;/span> number &lt;span style="color:#ff79c6">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">++&lt;/span>sum
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">debug&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;Sum = ${sum}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I use log.debug so my information is logged only if my project configuration allows that. That way if we turn off DEBUG, the logged line should not affect application speed. But is that really true?&lt;/p>
&lt;p>Let’s check if the logged value is really not accessed?
To do so we need to turn off DEBUG and modify the code:&lt;/p></description></item><item><title>Welcome to Bitecode Blog</title><link>https://bitecode.blog/2016/05/01/hello-world/</link><pubDate>Sun, 01 May 2016 00:00:00 +0000</pubDate><guid>https://bitecode.blog/2016/05/01/hello-world/</guid><description>&lt;blockquote>
&lt;p>“Yeah It&amp;rsquo;s on. ”&lt;/p>&lt;/blockquote>
&lt;h2 id="hello-world">Hello World!&lt;/h2></description></item><item><title/><link>https://bitecode.blog/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bitecode.blog/about/</guid><description>&lt;h2 id="about-me">About Me&lt;/h2>
&lt;p>&lt;strong>&lt;em>Marcin Szlagor&lt;/em>&lt;/strong> is a software engineer specializing in JVM languages and frameworks with professional experince since 2003. He has been working on many operating systems, using many different programming languages and numerous frameworks.&lt;/p>
&lt;h3 id="hobbist">Hobbist&lt;/h3>
&lt;p>His programming adventure started in his youth (1996). His first language was &lt;a href="https://en.wikipedia.org/wiki/Clipper_(programming_language)">Clipper&lt;/a>, later he moved to Windows programming starting with Delphi 2. Next languages were C, C++ with some pinch of Assembly. For quite a long time he felt the need to be close to operating system creating small/lightweight applications (WinAPI) and device drivers on Windows.&lt;/p></description></item><item><title/><link>https://bitecode.blog/notes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bitecode.blog/notes/</guid><description/></item><item><title/><link>https://bitecode.blog/search/placeholder/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bitecode.blog/search/placeholder/</guid><description/></item><item><title>Posts Archive</title><link>https://bitecode.blog/archive/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bitecode.blog/archive/</guid><description/></item></channel></rss>