<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Bitecode blog</title><link>https://bitecode.blog/post/</link><description>Recent content in Posts on Bitecode blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Fri, 10 May 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://bitecode.blog/post/index.xml" rel="self" type="application/rss+xml"/><item><title>Tweaking the stack for fun and profit</title><link>https://bitecode.blog/2024/05/10/tweaking-stack-for-fun-and-profit/</link><pubDate>Fri, 10 May 2024 00:00:00 +0000</pubDate><guid>https://bitecode.blog/2024/05/10/tweaking-stack-for-fun-and-profit/</guid><description>Stackoverflow we&amp;rsquo;ve all been there&amp;hellip; :)
Most of the time, we&amp;rsquo;re experiencing stackoverflow exception when thread in the JVM application has too long call chain. That can result in eating up all stack memory by stack frames. JVM has safe defaults for stack memory region and usually it&amp;rsquo;s around 1MB. If you encounter StackoverflowException, most likely you&amp;rsquo;re using recursion in your application - either planned or not :)
The default thread stack space can be found by executing:</description></item><item><title>Remote JVM debugging</title><link>https://bitecode.blog/2024/04/23/remote-debugging-on-kubernates/</link><pubDate>Tue, 23 Apr 2024 00:00:00 +0000</pubDate><guid>https://bitecode.blog/2024/04/23/remote-debugging-on-kubernates/</guid><description>Scenario Debugging applications in a local environment is straightforward, but what happens when your application is running in a Kubernetes cluster? Sometimes the best place to debug an issue is the remote instance itself. This article will guide you through the process of remotely debugging your Java applications running in Kubernetes.
Prerequisites In this very short post I assume you have:
a Java application running in a Kubernetes cluster IntelliJ IDEA kubectl command-line tool installed and configured Step 1: Start Your Java Application in Debug Mode First, you need to ensure your Java application is running in debug mode.</description></item><item><title>Introduction to Java ergonomics</title><link>https://bitecode.blog/2024/04/20/java-ergonomics-basics/</link><pubDate>Sat, 20 Apr 2024 00:00:00 +0000</pubDate><guid>https://bitecode.blog/2024/04/20/java-ergonomics-basics/</guid><description>Intro It&amp;rsquo;s not a secret that JVM is an extremly complex execution environment. It has many options that can be set to tune the application execution. What happens if we don&amp;rsquo;t set any of them or we pick only few? In this article I will explain what is Java ergonomics and how it works to supply default JVM options. I will also tell why it&amp;rsquo;s never safe to rely on the defaults.</description></item><item><title>Serialization exploits in JVM</title><link>https://bitecode.blog/2024/04/05/jvm-serialization-exploits/</link><pubDate>Fri, 05 Apr 2024 00:00:00 +0000</pubDate><guid>https://bitecode.blog/2024/04/05/jvm-serialization-exploits/</guid><description>Intro The Java Virtual Machine (JVM) provides a mechanism for persisting Java objects, known as serialization. When introducing, it was a great step forward, as developers stopped reinventing the wheel and writing the same (still complex) boilerplate code. As we later learned it also opened a pandora box. I will try to describe the problem in the article below.
Problem This process of serialization involves converting the state of an object into a byte stream, which can then be reverted back into a copy of the object.</description></item><item><title>Between null and positive infinity</title><link>https://bitecode.blog/2016/08/19/groovy-compare-null/</link><pubDate>Fri, 19 Aug 2016 00:00:00 +0000</pubDate><guid>https://bitecode.blog/2016/08/19/groovy-compare-null/</guid><description>Problem I happen to create a construction like this:
if(object?.value &amp;gt; 0) { println &amp;#34;do something&amp;#34; } else { println &amp;#34;do nothing&amp;#34; } Are you sure what will be printed when object is null? I must say I wasn’t.
We got used to negate null in groovy like this:
assert !null == true but what about using null with relation operator?
Comparing null Let us review below code:
assert null &amp;lt; 0 assert null &amp;lt; Integer.</description></item><item><title>Dumping large MySQL database</title><link>https://bitecode.blog/2016/05/14/mysql-dump-large-database/</link><pubDate>Thu, 02 Jun 2016 00:00:00 +0000</pubDate><guid>https://bitecode.blog/2016/05/14/mysql-dump-large-database/</guid><description>Problem Not going into details of credentials basic mysqldump command looks like this:
mysqldump database &amp;gt; database_dump.sql Dump file size was ~3GB which might take quite long. Especially when the connection to mysql server was not fast enough.
Solution After a few attempts and noticing that it might take too long to fetch all data I found out that there is a nice switch in mysql and mysqldump commands.
--compress, -C Switch will tell mysql server to compress the dump on the fly so you can save a lot of bandwidth.</description></item><item><title>Log Levels Performance</title><link>https://bitecode.blog/2016/05/14/log-levels-performance/</link><pubDate>Sat, 14 May 2016 00:00:00 +0000</pubDate><guid>https://bitecode.blog/2016/05/14/log-levels-performance/</guid><description>Problem Take an example with grails log.debug() call. Let’s say I want to log a very often executed code.
Long sum = 0 (1..1000).each { number -&amp;gt; ++sum log.debug &amp;#34;Sum = ${sum}&amp;#34; } I use log.debug so my information is logged only if my project configuration allows that. That way if we turn off DEBUG, the logged line should not affect application speed. But is that really true?
Let’s check if the logged value is really not accessed?</description></item><item><title>Welcome to Bitecode Blog</title><link>https://bitecode.blog/2016/05/01/hello-world/</link><pubDate>Sun, 01 May 2016 00:00:00 +0000</pubDate><guid>https://bitecode.blog/2016/05/01/hello-world/</guid><description> “Yeah It&amp;rsquo;s on. ”
Hello World!</description></item></channel></rss>